{"version":3,"sources":["webpack:///./src/components/Tag.tsx","webpack:///./src/pages/index.js"],"names":["Tag","children","props","className","BlogIndex","render","data","this","siteTitle","site","siteMetadata","title","posts","allMdx","edges","tags","group","location","slice","map","fieldValue","totalCount","tag","key","style","boxShadow","to","length","node","frontmatter","fields","slug","excerpt","React","Component","pageQuery"],"mappings":"+LAEO,IAAMA,EAA+B,SAAC,GAA2B,IAAzBC,EAAyB,EAAzBA,SAAaC,E,oIAAY,iBACpE,OACI,wCACQA,EADR,CAEIC,UAAU,2HAETF,K,gKCDPG,E,gLACJC,OAAA,WAAU,IACAC,EAASC,KAAKL,MAAdI,KACFE,EAAYF,EAAKG,KAAKC,aAAaC,MACnCC,EAAQN,EAAKO,OAAOC,MACpBC,EAAOT,EAAKO,OAAOG,OAAS,GAElC,OACE,kBAAC,IAAD,CAAQC,SAAUV,KAAKL,MAAMe,SAAUN,MAAOH,GAC5C,kBAAC,IAAD,CAAKG,MAAM,cAEX,yBAAKR,UAAU,qCACb,yBAAKA,UAAU,qBACb,oCACA,4BACGY,EAAKG,MAAM,EAAG,GAAGC,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,WAC7BC,EAAMF,EAEZ,OACE,wBAAIG,IAFO,SAEQD,GACjB,iCACE,gCACE,kBAAC,OAAD,CAAME,MAAO,CAAEC,UAAU,QAAWC,GAAE,KACpC,kBAAC,IAAD,SACIJ,EADJ,KACWD,EADX,YASZ,wBAAIlB,UAAU,QACZ,iCACE,gCACE,2BACE,kBAAC,OAAD,CACEA,UAAU,UACVqB,MAAO,CAAEC,UAAU,QACnBC,GAAG,SAHL,aAKaX,EAAKY,OALlB,WAcZ,6BACE,8CACA,wBAAIxB,UAAU,+CACXS,EAAMM,MAAM,EAAG,GAAGC,KAAI,YAAe,IAAZS,EAAW,EAAXA,KAClBjB,EAAQiB,EAAKC,YAAYlB,OAASiB,EAAKE,OAAOC,KACpD,OACE,wBAAI5B,UAAU,gBAAgBoB,IAAKK,EAAKE,OAAOC,MAC7C,6BAAS5B,UAAU,uDACjB,gCACE,uBAAGA,UAAU,0BACX,kBAAC,OAAD,CACEqB,MAAO,CAAEC,UAAU,QACnBC,GAAIE,EAAKE,OAAOC,MAEfpB,KAIP,kBAAC,OAAD,CAAMa,MAAO,CAAEC,UAAU,QAAWC,GAAIE,EAAKE,OAAOC,MAClD,uBAAG5B,UAAU,2BACVyB,EAAKI,QAAQd,MAAM,GAAIU,EAAKI,QAAQL,UAGzC,6BACGC,EAAKC,YAAYd,KAAKI,KAAI,SAAAG,GACzB,OAAO,kBAAC,IAAD,CAAKC,IAAKD,GAAV,IAAiBA,iB,GA3E1BW,IAAMC,WA0Ff9B,YAER,IAAM+B,EAAS","file":"component---src-pages-index-js-76f4c885f7d24a2f564b.js","sourcesContent":["\nimport * as React from 'react';\nexport const Tag: React.FunctionComponent = ({ children, ...props }) => {\n    return (\n        <span\n            {...props}\n            className=\" cursor-pointer inline-block hover:bg-green-200 bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-800\"\n        >\n            {children}\n        </span>\n    )\n}","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { Tag } from \"../components/Tag\"\n\nclass BlogIndex extends React.Component {\n  render() {\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const posts = data.allMdx.edges\n    const tags = data.allMdx.group || []\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title=\"All posts\" />\n\n        <div className=\"flex flex-col-reverse lg:flex-row\">\n          <div className=\"lg:pr-12 lg:w-1/4\">\n            <h2>Tags</h2>\n            <ul>\n              {tags.slice(0, 9).map(({ fieldValue, totalCount }) => {\n                const tag = fieldValue\n                const tagPath = `/tags/`\n                return (\n                  <li key={tagPath + tag}>\n                    <article>\n                      <header>\n                        <Link style={{ boxShadow: `none` }} to={`/`}>\n                          <Tag>\n                            #{tag} ({totalCount})\n                          </Tag>\n                        </Link>\n                      </header>\n                    </article>\n                  </li>\n                )\n              })}\n              <li className=\"mt-3\">\n                <article>\n                  <header>\n                    <p>\n                      <Link\n                        className=\"text-xl\"\n                        style={{ boxShadow: `none` }}\n                        to=\"/tags\"\n                      >\n                        All Tags ({tags.length})\n                      </Link>\n                    </p>\n                  </header>\n                </article>\n              </li>\n            </ul>\n          </div>\n\n          <div>\n            <h2>Recent Recipes</h2>\n            <ul className=\"lg:flex lg:flex-row lg:w-full lg:flex-wrap \">\n              {posts.slice(0, 9).map(({ node }) => {\n                const title = node.frontmatter.title || node.fields.slug\n                return (\n                  <li className=\"lg:1/5 lg:p-5\" key={node.fields.slug}>\n                    <article className=\"mb-6 p-5 max-w-sm rounded overflow-hidden shadow-lg\">\n                      <header>\n                        <p className=\"font-bold text-xl mb-2\">\n                          <Link\n                            style={{ boxShadow: `none` }}\n                            to={node.fields.slug}\n                          >\n                            {title}\n                          </Link>\n                        </p>\n                      </header>\n                      <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n                        <p className=\"text-gray-700 text-base\">\n                          {node.excerpt.slice(19, node.excerpt.length)}\n                        </p>\n                      </Link>\n                      <div>\n                        {node.frontmatter.tags.map(tag => {\n                          return <Tag key={tag}>#{tag}</Tag>\n                        })}\n                      </div>\n                    </article>\n                  </li>\n                )\n              })}\n            </ul>\n          </div>\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            tags\n          }\n        }\n      }\n    }\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}