{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/_string-html.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.string.link.js"],"names":["BlogIndex","render","data","this","props","siteTitle","site","siteMetadata","title","posts","allMdx","edges","tags","group","location","className","slice","map","fieldValue","totalCount","tag","key","style","boxShadow","to","length","node","frontmatter","fields","slug","excerpt","marginTop","React","Component","pageQuery","$export","fails","defined","quot","createHTML","string","attribute","value","S","String","p1","replace","module","exports","NAME","exec","O","P","F","test","toLowerCase","split","url"],"mappings":"yOASA,IA0CMA,E,gLACJC,OAAA,WAAU,IACAC,EAASC,KAAKC,MAAdF,KACFG,EAAYH,EAAKI,KAAKC,aAAaC,MACnCC,EAAQP,EAAKQ,OAAOC,MACpBC,EAAOV,EAAKQ,OAAOG,OAAS,GAElC,OACE,kBAAC,IAAD,CAAQC,SAAUX,KAAKC,MAAMU,SAAUN,MAAOH,GAC5C,kBAAC,IAAD,CAAKG,MAAM,cAEX,yBAAKO,UAAU,qCACb,yBAAKA,UAAU,+BACb,oCACA,4BACGH,EAAKI,MAAM,EAAG,GAAGC,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,WAC7BC,EAAMF,EAEZ,OACE,wBAAIH,UAAU,MAAMM,IAFT,SAEwBD,GACjC,iCACE,gCACE,kBAAC,OAAD,CAAME,MAAO,CAAEC,UAAU,QAAWC,GAAE,SAAWJ,GAC/C,kBAAC,IAAD,KACGA,EADH,KACUD,EADV,YASZ,wBAAIJ,UAAU,QACZ,iCACE,gCACE,2BACE,kBAAC,OAAD,CACEA,UAAU,UACVO,MAAO,CAAEC,UAAU,QACnBC,GAAG,SAHL,aAKaZ,EAAKa,OALlB,WAcZ,6BACE,8CACA,wBAAIV,UAAU,uDACXN,EAAMO,MAAM,EAAG,GAAGC,KAAI,YAAe,IAAZS,EAAW,EAAXA,KAClBlB,EAAQkB,EAAKC,YAAYnB,OAASkB,EAAKE,OAAOC,KACpD,OACE,wBAAId,UAAU,gBAAgBM,IAAKK,EAAKE,OAAOC,MAC7C,6BAASd,UAAU,wEACjB,gCACE,uBAAGA,UAAU,0BACX,kBAAC,OAAD,CACEO,MAAO,CAAEC,UAAU,QACnBC,GAAIE,EAAKE,OAAOC,MAEfrB,KAIP,kBAAC,OAAD,CAAMc,MAAO,CAAEC,UAAU,QAAWC,GAAIE,EAAKE,OAAOC,MAClD,uBAAGd,UAAU,2BACVW,EAAKI,QAAQd,MAAM,GAAIU,EAAKI,QAAQL,UAGzC,6BACGC,EAAKC,YAAYf,KAAKK,KAAI,SAAAG,GACzB,OACE,kBAAC,OAAD,CACEE,MAAO,CAAEC,UAAU,OAASQ,UAAW,QACvCP,GAAE,SAAWJ,EACbC,IAAKD,GAEL,kBAAC,IAAD,CAAKC,IAAKD,GAAMA,kB,GAjFtBY,IAAMC,WAkGfjC,YAER,IAAMkC,EAAS,a,uBCvJtB,IAAIC,EAAU,EAAQ,QAClBC,EAAQ,EAAQ,QAChBC,EAAU,EAAQ,QAClBC,EAAO,KAEPC,EAAa,SAAUC,EAAQpB,EAAKqB,EAAWC,GACjD,IAAIC,EAAIC,OAAOP,EAAQG,IACnBK,EAAK,IAAMzB,EAEf,MADkB,KAAdqB,IAAkBI,GAAM,IAAMJ,EAAY,KAAOG,OAAOF,GAAOI,QAAQR,EAAM,UAAY,KACtFO,EAAK,IAAMF,EAAI,KAAOvB,EAAM,KAErC2B,EAAOC,QAAU,SAAUC,EAAMC,GAC/B,IAAIC,EAAI,GACRA,EAAEF,GAAQC,EAAKX,GACfJ,EAAQA,EAAQiB,EAAIjB,EAAQkB,EAAIjB,GAAM,WACpC,IAAIkB,EAAO,GAAGL,GAAM,KACpB,OAAOK,IAASA,EAAKC,eAAiBD,EAAKE,MAAM,KAAK/B,OAAS,KAC7D,SAAU0B,K,kCCfhB,EAAQ,OAAR,CAA0B,QAAQ,SAAUZ,GAC1C,OAAO,SAAckB,GACnB,OAAOlB,EAAWpC,KAAM,IAAK,OAAQsD","file":"component---src-pages-index-js-03b77ec5a9abbba936f9.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { Tag } from \"../components/Tag\"\n\nimport \"./index.css\"\n\nconst Card = ({ tags = [], title = \"\", desc = \"\", link = \"\" }) => {\n  return (\n    <article\n      className={` w-64 h-64 m-6 p-5 max-w-sm rounded overflow-hidden ${\n        link ? \"hover:shadow-2xl\" : \"\"\n      } shadow-lg`}\n    >\n      <header>\n        <p className=\"font-bold text-xl mb-2\">\n          {link ? (\n            <Link style={{ boxShadow: `none` }} to={link}>\n              {title}\n            </Link>\n          ) : (\n            title\n          )}\n        </p>\n      </header>\n      {link ? (\n        <Link style={{ boxShadow: `none` }} to={link}>\n          <div className=\"text-gray-700 text-base\">{desc}</div>\n        </Link>\n      ) : (\n        <div className=\"text-gray-700 text-base\">{desc}</div>\n      )}\n      <div>\n        {tags.map(tag => {\n          return (\n            <Link\n              style={{ boxShadow: `none`, marginTop: \"10px\" }}\n              to={`/tags/${tag}`}\n              key={tag}\n            >\n              <Tag key={tag}>{tag}</Tag>\n            </Link>\n          )\n        })}\n      </div>\n    </article>\n  )\n}\n\nclass BlogIndex extends React.Component {\n  render() {\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const posts = data.allMdx.edges\n    const tags = data.allMdx.group || []\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title=\"All posts\" />\n\n        <div className=\"flex flex-col-reverse lg:flex-row\">\n          <div className=\"lg:pr-12 lg:w-1/3 md:w-1/2 \">\n            <h2>Tags</h2>\n            <ul>\n              {tags.slice(0, 9).map(({ fieldValue, totalCount }) => {\n                const tag = fieldValue\n                const tagPath = `/tags/`\n                return (\n                  <li className=\"m-5\" key={tagPath + tag}>\n                    <article>\n                      <header>\n                        <Link style={{ boxShadow: `none` }} to={`/tags/${tag}`}>\n                          <Tag>\n                            {tag} ({totalCount})\n                          </Tag>\n                        </Link>\n                      </header>\n                    </article>\n                  </li>\n                )\n              })}\n              <li className=\"mt-3\">\n                <article>\n                  <header>\n                    <p>\n                      <Link\n                        className=\"text-xl\"\n                        style={{ boxShadow: `none` }}\n                        to=\"/tags\"\n                      >\n                        All Tags ({tags.length})\n                      </Link>\n                    </p>\n                  </header>\n                </article>\n              </li>\n            </ul>\n          </div>\n\n          <div>\n            <h2>Recent Recipes</h2>\n            <ul className=\"lg:flex lg:flex-row lg:w-full md:w-1/2 lg:flex-wrap\">\n              {posts.slice(0, 9).map(({ node }) => {\n                const title = node.frontmatter.title || node.fields.slug\n                return (\n                  <li className=\"lg:1/5 lg:p-5\" key={node.fields.slug}>\n                    <article className=\"mb-6 p-5 max-w-sm rounded overflow-hidden hover:shadow-2xl shadow-lg\">\n                      <header>\n                        <p className=\"font-bold text-xl mb-2\">\n                          <Link\n                            style={{ boxShadow: `none` }}\n                            to={node.fields.slug}\n                          >\n                            {title}\n                          </Link>\n                        </p>\n                      </header>\n                      <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n                        <p className=\"text-gray-700 text-base\">\n                          {node.excerpt.slice(19, node.excerpt.length)}\n                        </p>\n                      </Link>\n                      <div>\n                        {node.frontmatter.tags.map(tag => {\n                          return (\n                            <Link\n                              style={{ boxShadow: `none`, marginTop: \"10px\" }}\n                              to={`/tags/${tag}`}\n                              key={tag}\n                            >\n                              <Tag key={tag}>{tag}</Tag>\n                            </Link>\n                          )\n                        })}\n                      </div>\n                    </article>\n                  </li>\n                )\n              })}\n            </ul>\n          </div>\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            tags\n          }\n        }\n      }\n    }\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`\n","var $export = require('./_export');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar quot = /\"/g;\n// B.2.3.2.1 CreateHTML(string, tag, attribute, value)\nvar createHTML = function (string, tag, attribute, value) {\n  var S = String(defined(string));\n  var p1 = '<' + tag;\n  if (attribute !== '') p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n  return p1 + '>' + S + '</' + tag + '>';\n};\nmodule.exports = function (NAME, exec) {\n  var O = {};\n  O[NAME] = exec(createHTML);\n  $export($export.P + $export.F * fails(function () {\n    var test = ''[NAME]('\"');\n    return test !== test.toLowerCase() || test.split('\"').length > 3;\n  }), 'String', O);\n};\n","'use strict';\n// B.2.3.10 String.prototype.link(url)\nrequire('./_string-html')('link', function (createHTML) {\n  return function link(url) {\n    return createHTML(this, 'a', 'href', url);\n  };\n});\n"],"sourceRoot":""}