{"version":3,"sources":["webpack:///./src/templates/tags.js"],"names":["Tags","pageContext","data","location","tag","allMdx","edges","totalCount","siteTitle","site","siteMetadata","title","tagHeader","map","node","slug","fields","frontmatter","key","to","pageQuery"],"mappings":"2FAAA,kGA8DeA,UAvDF,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACzBC,EAAQH,EAARG,IADwC,EAElBF,EAAKG,OAA3BC,EAFwC,EAExCA,MAAOC,EAFiC,EAEjCA,WACTC,EAAYN,EAAKO,KAAKC,aAAaC,MAEnCC,EAAeL,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEEH,EAFF,IAIf,OACE,kBAAC,IAAD,CAAQD,SAAUA,EAAUQ,MAAOH,GACjC,4BAAKI,GACL,4BACGN,EAAMO,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAASD,EAAKE,OAAdD,KACAJ,EAAUG,EAAKG,YAAfN,MACR,OACE,wBAAIO,IAAKH,GACP,kBAAC,OAAD,CAAMI,GAAIJ,GAAOJ,QASzB,kBAAC,OAAD,CAAMQ,GAAG,SAAT,cA8BC,IAAMC,EAAS","file":"component---src-templates-tags-js-4a6e1fc3447d115e3e9e.js","sourcesContent":["import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport Layout from \"../components/layout\"\r\n\r\n// Components\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\nconst Tags = ({ pageContext, data, location }) => {\r\n  const { tag } = pageContext\r\n  const { edges, totalCount } = data.allMdx\r\n  const siteTitle = data.site.siteMetadata.title\r\n\r\n  const tagHeader = `${totalCount} post${\r\n    totalCount === 1 ? \"\" : \"s\"\r\n  } tagged with \"${tag}\"`\r\n\r\n  return (\r\n    <Layout location={location} title={siteTitle}>\r\n      <h1>{tagHeader}</h1>\r\n      <ul>\r\n        {edges.map(({ node }) => {\r\n          const { slug } = node.fields\r\n          const { title } = node.frontmatter\r\n          return (\r\n            <li key={slug}>\r\n              <Link to={slug}>{title}</Link>\r\n            </li>\r\n          )\r\n        })}\r\n      </ul>\r\n      {/*\r\n              This links to a page that does not yet exist.\r\n              We'll come back to it!\r\n            */}\r\n      <Link to=\"/tags\">All tags</Link>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nTags.propTypes = {\r\n  pageContext: PropTypes.shape({\r\n    tag: PropTypes.string.isRequired,\r\n  }),\r\n  data: PropTypes.shape({\r\n    allMdx: PropTypes.shape({\r\n      totalCount: PropTypes.number.isRequired,\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            frontmatter: PropTypes.shape({\r\n              title: PropTypes.string.isRequired,\r\n            }),\r\n            fields: PropTypes.shape({\r\n              slug: PropTypes.string.isRequired,\r\n            }),\r\n          }),\r\n        }).isRequired\r\n      ),\r\n    }),\r\n  }),\r\n}\r\n\r\nexport default Tags\r\n\r\nexport const pageQuery = graphql`\r\n  query($tag: String) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        author\r\n      }\r\n    }\r\n    allMdx(\r\n      limit: 2000\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { tags: { in: [$tag] } } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            title\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}